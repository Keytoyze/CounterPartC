// Generated by buildSrc/GenerateAST.py
#ifndef _SPECIFIER_QUALIFIER_LIST_H_
#define _SPECIFIER_QUALIFIER_LIST_H_

#include "ast/ast.h"
//#header

class SpecifierQualifierList: public BasicAST {
public:
    virtual ~SpecifierQualifierList() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class SpecifierQualifierList1: public SpecifierQualifierList {
public:
    TypeSpecifier* typeSpecifierAst1;
    SpecifierQualifierList* specifierQualifierListAst2;

    SpecifierQualifierList1(
        TypeSpecifier* typeSpecifierAst1,
        SpecifierQualifierList* specifierQualifierListAst2
    ): typeSpecifierAst1(typeSpecifierAst1), specifierQualifierListAst2(specifierQualifierListAst2) {}

    virtual ~SpecifierQualifierList1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class SpecifierQualifierList2: public SpecifierQualifierList {
public:
    TypeSpecifier* typeSpecifierAst1;

    SpecifierQualifierList2(
        TypeSpecifier* typeSpecifierAst1
    ): typeSpecifierAst1(typeSpecifierAst1) {}

    virtual ~SpecifierQualifierList2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class SpecifierQualifierList3: public SpecifierQualifierList {
public:
    TypeQualifier* typeQualifierAst1;
    SpecifierQualifierList* specifierQualifierListAst2;

    SpecifierQualifierList3(
        TypeQualifier* typeQualifierAst1,
        SpecifierQualifierList* specifierQualifierListAst2
    ): typeQualifierAst1(typeQualifierAst1), specifierQualifierListAst2(specifierQualifierListAst2) {}

    virtual ~SpecifierQualifierList3();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class SpecifierQualifierList4: public SpecifierQualifierList {
public:
    TypeQualifier* typeQualifierAst1;

    SpecifierQualifierList4(
        TypeQualifier* typeQualifierAst1
    ): typeQualifierAst1(typeQualifierAst1) {}

    virtual ~SpecifierQualifierList4();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_TYPEQUALIFIER_
#define _CLASS_TYPEQUALIFIER_
class TypeQualifier;
#endif //_CLASS_TYPEQUALIFIER_
#ifndef _CLASS_TYPESPECIFIER_
#define _CLASS_TYPESPECIFIER_
class TypeSpecifier;
#endif //_CLASS_TYPESPECIFIER_

#endif // _SPECIFIER_QUALIFIER_LIST_H_
