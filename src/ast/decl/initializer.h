// Generated by buildSrc/GenerateAST.py
#ifndef _INITIALIZER_H_
#define _INITIALIZER_H_

#include "ast/ast.h"
//#header

class Initializer: public BasicAST {
public:
    virtual ~Initializer() {}
    virtual void GenerateIR(Context context) {}
    virtual void Dump(int depth) {}
};

class Initializer1: public Initializer {
public:
    AssignmentExpression* assignmentExpressionAst1;

    Initializer1(
        AssignmentExpression* assignmentExpressionAst1
    ): assignmentExpressionAst1(assignmentExpressionAst1) {}

    virtual ~Initializer1();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class Initializer2: public Initializer {
public:
    LCurly* lCurlyAst1;
    InitializerList* initializerListAst2;
    RCurly* rCurlyAst3;

    Initializer2(
        LCurly* lCurlyAst1,
        InitializerList* initializerListAst2,
        RCurly* rCurlyAst3
    ): lCurlyAst1(lCurlyAst1), initializerListAst2(initializerListAst2), rCurlyAst3(rCurlyAst3) {}

    virtual ~Initializer2();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class Initializer3: public Initializer {
public:
    LCurly* lCurlyAst1;
    InitializerList* initializerListAst2;
    Comma* commaAst3;
    RCurly* rCurlyAst4;

    Initializer3(
        LCurly* lCurlyAst1,
        InitializerList* initializerListAst2,
        Comma* commaAst3,
        RCurly* rCurlyAst4
    ): lCurlyAst1(lCurlyAst1), initializerListAst2(initializerListAst2), commaAst3(commaAst3), rCurlyAst4(rCurlyAst4) {}

    virtual ~Initializer3();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_COMMA_
#define _CLASS_COMMA_
class Comma;
#endif //_CLASS_COMMA_
#ifndef _CLASS_RCURLY_
#define _CLASS_RCURLY_
class RCurly;
#endif //_CLASS_RCURLY_
#ifndef _CLASS_INITIALIZERLIST_
#define _CLASS_INITIALIZERLIST_
class InitializerList;
#endif //_CLASS_INITIALIZERLIST_
#ifndef _CLASS_LCURLY_
#define _CLASS_LCURLY_
class LCurly;
#endif //_CLASS_LCURLY_
#ifndef _CLASS_ASSIGNMENTEXPRESSION_
#define _CLASS_ASSIGNMENTEXPRESSION_
class AssignmentExpression;
#endif //_CLASS_ASSIGNMENTEXPRESSION_

#endif // _INITIALIZER_H_
