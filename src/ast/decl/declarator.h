// Generated by buildSrc/GenerateAST.py
#ifndef _DECLARATOR_H_
#define _DECLARATOR_H_

#include "ast/ast.h"
//#header

class Declarator: public BasicAST {
public:
    virtual ~Declarator() {}
    virtual void GenerateIR(Context& context) {}
    virtual void Dump(int depth) {}
};

class Declarator1: public Declarator {
public:
    Pointer* pointerAst1;
    DirectDeclarator* directDeclaratorAst2;

    Declarator1(
        Pointer* pointerAst1,
        DirectDeclarator* directDeclaratorAst2
    ): pointerAst1(pointerAst1), directDeclaratorAst2(directDeclaratorAst2) {}

    virtual ~Declarator1();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class Declarator2: public Declarator {
public:
    DirectDeclarator* directDeclaratorAst1;

    Declarator2(
        DirectDeclarator* directDeclaratorAst1
    ): directDeclaratorAst1(directDeclaratorAst1) {}

    virtual ~Declarator2();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_POINTER_
#define _CLASS_POINTER_
class Pointer;
#endif //_CLASS_POINTER_
#ifndef _CLASS_DIRECTDECLARATOR_
#define _CLASS_DIRECTDECLARATOR_
class DirectDeclarator;
#endif //_CLASS_DIRECTDECLARATOR_

#endif // _DECLARATOR_H_
