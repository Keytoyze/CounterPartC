// Generated by buildSrc/GenerateAST.py
#ifndef _ABSTRACT_DECLARATOR_H_
#define _ABSTRACT_DECLARATOR_H_

#include "ast/ast.h"
//#header

class AbstractDeclarator: public BasicAST {
public:
    virtual ~AbstractDeclarator() {}
    virtual void GenerateIR(Context& context) {}
    virtual void Dump(int depth) {}
};

class AbstractDeclarator1: public AbstractDeclarator {
public:
    Pointer* pointerAst1;

    AbstractDeclarator1(
        Pointer* pointerAst1
    ): pointerAst1(pointerAst1) {}

    virtual ~AbstractDeclarator1();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AbstractDeclarator2: public AbstractDeclarator {
public:
    DirectAbstractDeclarator* directAbstractDeclaratorAst1;

    AbstractDeclarator2(
        DirectAbstractDeclarator* directAbstractDeclaratorAst1
    ): directAbstractDeclaratorAst1(directAbstractDeclaratorAst1) {}

    virtual ~AbstractDeclarator2();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AbstractDeclarator3: public AbstractDeclarator {
public:
    Pointer* pointerAst1;
    DirectAbstractDeclarator* directAbstractDeclaratorAst2;

    AbstractDeclarator3(
        Pointer* pointerAst1,
        DirectAbstractDeclarator* directAbstractDeclaratorAst2
    ): pointerAst1(pointerAst1), directAbstractDeclaratorAst2(directAbstractDeclaratorAst2) {}

    virtual ~AbstractDeclarator3();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_DIRECTABSTRACTDECLARATOR_
#define _CLASS_DIRECTABSTRACTDECLARATOR_
class DirectAbstractDeclarator;
#endif //_CLASS_DIRECTABSTRACTDECLARATOR_
#ifndef _CLASS_POINTER_
#define _CLASS_POINTER_
class Pointer;
#endif //_CLASS_POINTER_

#endif // _ABSTRACT_DECLARATOR_H_
