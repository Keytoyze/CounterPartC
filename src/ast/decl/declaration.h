// Generated by buildSrc/GenerateAST.py
#ifndef _DECLARATION_H_
#define _DECLARATION_H_

//#include "ast/ast.h"
#include "ast/declaration_type.h"

class DeclarationSpecifiers;
class InitDeclaratorList;
class SimicolonSingle;

class Declaration: public BasicAST {
public:
    Type specifierType;
    DeclarationType declarationType = DeclarationType::UNKNOWN;
    FunctionParameterList parameterList; // valid when declarationType == DeclarationType::FUNCTION
    virtual ~Declaration() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class Declaration1: public Declaration {
public:
    DeclarationSpecifiers* declarationSpecifiersAst1;
    SimicolonSingle* simicolonSingleAst2;

    Declaration1(
        DeclarationSpecifiers* declarationSpecifiersAst1,
        SimicolonSingle* simicolonSingleAst2
    ): declarationSpecifiersAst1(declarationSpecifiersAst1), simicolonSingleAst2(simicolonSingleAst2) {}

    virtual ~Declaration1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class Declaration2: public Declaration {
public:
    DeclarationSpecifiers* declarationSpecifiersAst1;
    InitDeclaratorList* initDeclaratorListAst2;
    SimicolonSingle* simicolonSingleAst3;

    Declaration2(
        DeclarationSpecifiers* declarationSpecifiersAst1,
        InitDeclaratorList* initDeclaratorListAst2,
        SimicolonSingle* simicolonSingleAst3
    ): declarationSpecifiersAst1(declarationSpecifiersAst1), initDeclaratorListAst2(initDeclaratorListAst2), simicolonSingleAst3(simicolonSingleAst3) {}

    virtual ~Declaration2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _DECLARATION_H_
