// Generated by buildSrc/GenerateAST.py
#ifndef _PARAMETER_DECLARATION_H_
#define _PARAMETER_DECLARATION_H_

//#include "ast/ast.h"
class AbstractDeclarator;
class DeclarationSpecifiers;
class Declarator;

class ParameterDeclaration: public BasicAST {
public:
    std::pair<Type, std::string> parameter;
    virtual ~ParameterDeclaration() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class ParameterDeclaration1: public ParameterDeclaration {
public:
    DeclarationSpecifiers* declarationSpecifiersAst1;
    Declarator* declaratorAst2;

    ParameterDeclaration1(
        DeclarationSpecifiers* declarationSpecifiersAst1,
        Declarator* declaratorAst2
    ): declarationSpecifiersAst1(declarationSpecifiersAst1), declaratorAst2(declaratorAst2) {}

    virtual ~ParameterDeclaration1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class ParameterDeclaration2: public ParameterDeclaration {
public:
    DeclarationSpecifiers* declarationSpecifiersAst1;
    AbstractDeclarator* abstractDeclaratorAst2;

    ParameterDeclaration2(
        DeclarationSpecifiers* declarationSpecifiersAst1,
        AbstractDeclarator* abstractDeclaratorAst2
    ): declarationSpecifiersAst1(declarationSpecifiersAst1), abstractDeclaratorAst2(abstractDeclaratorAst2) {}

    virtual ~ParameterDeclaration2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class ParameterDeclaration3: public ParameterDeclaration {
public:
    DeclarationSpecifiers* declarationSpecifiersAst1;

    ParameterDeclaration3(
        DeclarationSpecifiers* declarationSpecifiersAst1
    ): declarationSpecifiersAst1(declarationSpecifiersAst1) {}

    virtual ~ParameterDeclaration3();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _PARAMETER_DECLARATION_H_
