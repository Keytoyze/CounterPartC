// Generated by buildSrc/GenerateAST.py
#ifndef _STRUCT_DECLARATOR_LIST_H_
#define _STRUCT_DECLARATOR_LIST_H_

//#include "ast/ast.h"
class Comma;
class StructDeclarator;

class StructDeclaratorList: public BasicAST {
public:
    virtual ~StructDeclaratorList() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class StructDeclaratorList1: public StructDeclaratorList {
public:
    StructDeclarator* structDeclaratorAst1;

    StructDeclaratorList1(
        StructDeclarator* structDeclaratorAst1
    ): structDeclaratorAst1(structDeclaratorAst1) {}

    virtual ~StructDeclaratorList1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class StructDeclaratorList2: public StructDeclaratorList {
public:
    StructDeclaratorList* structDeclaratorListAst1;
    Comma* commaAst2;
    StructDeclarator* structDeclaratorAst3;

    StructDeclaratorList2(
        StructDeclaratorList* structDeclaratorListAst1,
        Comma* commaAst2,
        StructDeclarator* structDeclaratorAst3
    ): structDeclaratorListAst1(structDeclaratorListAst1), commaAst2(commaAst2), structDeclaratorAst3(structDeclaratorAst3) {}

    virtual ~StructDeclaratorList2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _STRUCT_DECLARATOR_LIST_H_
