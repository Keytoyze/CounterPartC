// Generated by buildSrc/GenerateAST.py
#ifndef _TYPE_SPECIFIER_H_
#define _TYPE_SPECIFIER_H_

#include "ast/ast.h"
//#header

class TypeSpecifier: public BasicAST {
public:
    virtual ~TypeSpecifier() {}
    virtual void GenerateIR(Context& context) {}
    virtual void Dump(int depth) {}
};

class TypeSpecifier1: public TypeSpecifier {
public:
    Void* voidAst1;

    TypeSpecifier1(
        Void* voidAst1
    ): voidAst1(voidAst1) {}

    virtual ~TypeSpecifier1();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier2: public TypeSpecifier {
public:
    Char* charAst1;

    TypeSpecifier2(
        Char* charAst1
    ): charAst1(charAst1) {}

    virtual ~TypeSpecifier2();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier3: public TypeSpecifier {
public:
    Short* shortAst1;

    TypeSpecifier3(
        Short* shortAst1
    ): shortAst1(shortAst1) {}

    virtual ~TypeSpecifier3();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier4: public TypeSpecifier {
public:
    Int* intAst1;

    TypeSpecifier4(
        Int* intAst1
    ): intAst1(intAst1) {}

    virtual ~TypeSpecifier4();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier5: public TypeSpecifier {
public:
    Long* longAst1;

    TypeSpecifier5(
        Long* longAst1
    ): longAst1(longAst1) {}

    virtual ~TypeSpecifier5();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier6: public TypeSpecifier {
public:
    Float* floatAst1;

    TypeSpecifier6(
        Float* floatAst1
    ): floatAst1(floatAst1) {}

    virtual ~TypeSpecifier6();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier7: public TypeSpecifier {
public:
    Double* doubleAst1;

    TypeSpecifier7(
        Double* doubleAst1
    ): doubleAst1(doubleAst1) {}

    virtual ~TypeSpecifier7();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier8: public TypeSpecifier {
public:
    Signed* signedAst1;

    TypeSpecifier8(
        Signed* signedAst1
    ): signedAst1(signedAst1) {}

    virtual ~TypeSpecifier8();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier9: public TypeSpecifier {
public:
    Unsigned* unsignedAst1;

    TypeSpecifier9(
        Unsigned* unsignedAst1
    ): unsignedAst1(unsignedAst1) {}

    virtual ~TypeSpecifier9();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier10: public TypeSpecifier {
public:
    StructOrUnionSpecifier* structOrUnionSpecifierAst1;

    TypeSpecifier10(
        StructOrUnionSpecifier* structOrUnionSpecifierAst1
    ): structOrUnionSpecifierAst1(structOrUnionSpecifierAst1) {}

    virtual ~TypeSpecifier10();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier11: public TypeSpecifier {
public:
    EnumSpecifier* enumSpecifierAst1;

    TypeSpecifier11(
        EnumSpecifier* enumSpecifierAst1
    ): enumSpecifierAst1(enumSpecifierAst1) {}

    virtual ~TypeSpecifier11();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class TypeSpecifier12: public TypeSpecifier {
public:
    TypeNameToken* typeNameTokenAst1;

    TypeSpecifier12(
        TypeNameToken* typeNameTokenAst1
    ): typeNameTokenAst1(typeNameTokenAst1) {}

    virtual ~TypeSpecifier12();
    virtual void GenerateIR(Context& context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_DOUBLE_
#define _CLASS_DOUBLE_
class Double;
#endif //_CLASS_DOUBLE_
#ifndef _CLASS_SIGNED_
#define _CLASS_SIGNED_
class Signed;
#endif //_CLASS_SIGNED_
#ifndef _CLASS_STRUCTORUNIONSPECIFIER_
#define _CLASS_STRUCTORUNIONSPECIFIER_
class StructOrUnionSpecifier;
#endif //_CLASS_STRUCTORUNIONSPECIFIER_
#ifndef _CLASS_INT_
#define _CLASS_INT_
class Int;
#endif //_CLASS_INT_
#ifndef _CLASS_SHORT_
#define _CLASS_SHORT_
class Short;
#endif //_CLASS_SHORT_
#ifndef _CLASS_UNSIGNED_
#define _CLASS_UNSIGNED_
class Unsigned;
#endif //_CLASS_UNSIGNED_
#ifndef _CLASS_VOID_
#define _CLASS_VOID_
class Void;
#endif //_CLASS_VOID_
#ifndef _CLASS_TYPENAMETOKEN_
#define _CLASS_TYPENAMETOKEN_
class TypeNameToken;
#endif //_CLASS_TYPENAMETOKEN_
#ifndef _CLASS_CHAR_
#define _CLASS_CHAR_
class Char;
#endif //_CLASS_CHAR_
#ifndef _CLASS_ENUMSPECIFIER_
#define _CLASS_ENUMSPECIFIER_
class EnumSpecifier;
#endif //_CLASS_ENUMSPECIFIER_
#ifndef _CLASS_FLOAT_
#define _CLASS_FLOAT_
class Float;
#endif //_CLASS_FLOAT_
#ifndef _CLASS_LONG_
#define _CLASS_LONG_
class Long;
#endif //_CLASS_LONG_

#endif // _TYPE_SPECIFIER_H_
