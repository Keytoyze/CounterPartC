// Generated by buildSrc/GenerateAST.py
#ifndef _ITERATION_STATEMENT_H_
#define _ITERATION_STATEMENT_H_

#include "ast/ast.h"
//#header

class IterationStatement: public BasicAST {
public:
    virtual ~IterationStatement() {}
    virtual void GenerateIR(Context context) {}
    virtual void Dump(int depth) {}
};

class IterationStatement1: public IterationStatement {
public:
    While* whileAst1;
    LRound* lRoundAst2;
    Expression* expressionAst3;
    RRound* rRoundAst4;
    Statement* statementAst5;

    IterationStatement1(
        While* whileAst1,
        LRound* lRoundAst2,
        Expression* expressionAst3,
        RRound* rRoundAst4,
        Statement* statementAst5
    ): whileAst1(whileAst1), lRoundAst2(lRoundAst2), expressionAst3(expressionAst3), rRoundAst4(rRoundAst4), statementAst5(statementAst5) {}

    virtual ~IterationStatement1();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class IterationStatement2: public IterationStatement {
public:
    Do* doAst1;
    Statement* statementAst2;
    While* whileAst3;
    LRound* lRoundAst4;
    Expression* expressionAst5;
    RRound* rRoundAst6;
    SimicolonSingle* simicolonSingleAst7;

    IterationStatement2(
        Do* doAst1,
        Statement* statementAst2,
        While* whileAst3,
        LRound* lRoundAst4,
        Expression* expressionAst5,
        RRound* rRoundAst6,
        SimicolonSingle* simicolonSingleAst7
    ): doAst1(doAst1), statementAst2(statementAst2), whileAst3(whileAst3), lRoundAst4(lRoundAst4), expressionAst5(expressionAst5), rRoundAst6(rRoundAst6), simicolonSingleAst7(simicolonSingleAst7) {}

    virtual ~IterationStatement2();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class IterationStatement3: public IterationStatement {
public:
    For* forAst1;
    LRound* lRoundAst2;
    ExpressionStatement* expressionStatementAst3;
    ExpressionStatement* expressionStatementAst4;
    RRound* rRoundAst5;
    Statement* statementAst6;

    IterationStatement3(
        For* forAst1,
        LRound* lRoundAst2,
        ExpressionStatement* expressionStatementAst3,
        ExpressionStatement* expressionStatementAst4,
        RRound* rRoundAst5,
        Statement* statementAst6
    ): forAst1(forAst1), lRoundAst2(lRoundAst2), expressionStatementAst3(expressionStatementAst3), expressionStatementAst4(expressionStatementAst4), rRoundAst5(rRoundAst5), statementAst6(statementAst6) {}

    virtual ~IterationStatement3();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class IterationStatement4: public IterationStatement {
public:
    For* forAst1;
    LRound* lRoundAst2;
    ExpressionStatement* expressionStatementAst3;
    ExpressionStatement* expressionStatementAst4;
    Expression* expressionAst5;
    RRound* rRoundAst6;
    Statement* statementAst7;

    IterationStatement4(
        For* forAst1,
        LRound* lRoundAst2,
        ExpressionStatement* expressionStatementAst3,
        ExpressionStatement* expressionStatementAst4,
        Expression* expressionAst5,
        RRound* rRoundAst6,
        Statement* statementAst7
    ): forAst1(forAst1), lRoundAst2(lRoundAst2), expressionStatementAst3(expressionStatementAst3), expressionStatementAst4(expressionStatementAst4), expressionAst5(expressionAst5), rRoundAst6(rRoundAst6), statementAst7(statementAst7) {}

    virtual ~IterationStatement4();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_EXPRESSION_
#define _CLASS_EXPRESSION_
class Expression;
#endif //_CLASS_EXPRESSION_
#ifndef _CLASS_LROUND_
#define _CLASS_LROUND_
class LRound;
#endif //_CLASS_LROUND_
#ifndef _CLASS_STATEMENT_
#define _CLASS_STATEMENT_
class Statement;
#endif //_CLASS_STATEMENT_
#ifndef _CLASS_RROUND_
#define _CLASS_RROUND_
class RRound;
#endif //_CLASS_RROUND_
#ifndef _CLASS_EXPRESSIONSTATEMENT_
#define _CLASS_EXPRESSIONSTATEMENT_
class ExpressionStatement;
#endif //_CLASS_EXPRESSIONSTATEMENT_
#ifndef _CLASS_FOR_
#define _CLASS_FOR_
class For;
#endif //_CLASS_FOR_
#ifndef _CLASS_WHILE_
#define _CLASS_WHILE_
class While;
#endif //_CLASS_WHILE_
#ifndef _CLASS_SIMICOLONSINGLE_
#define _CLASS_SIMICOLONSINGLE_
class SimicolonSingle;
#endif //_CLASS_SIMICOLONSINGLE_
#ifndef _CLASS_DO_
#define _CLASS_DO_
class Do;
#endif //_CLASS_DO_

#endif // _ITERATION_STATEMENT_H_
