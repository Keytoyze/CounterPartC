// Generated by buildSrc/GenerateAST.py
#ifndef _FUNCTION_DEFINITION_H_
#define _FUNCTION_DEFINITION_H_

//#include "ast/ast.h"
class CompoundStatement;
class DeclarationList;
class DeclarationSpecifiers;
class Declarator;

class FunctionDefinition: public BasicAST {
public:
    virtual ~FunctionDefinition() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class FunctionDefinition1: public FunctionDefinition {
public:
    DeclarationSpecifiers* declarationSpecifiersAst1;
    Declarator* declaratorAst2;
    DeclarationList* declarationListAst3;
    CompoundStatement* compoundStatementAst4;

    FunctionDefinition1(
        DeclarationSpecifiers* declarationSpecifiersAst1,
        Declarator* declaratorAst2,
        DeclarationList* declarationListAst3,
        CompoundStatement* compoundStatementAst4
    ): declarationSpecifiersAst1(declarationSpecifiersAst1), declaratorAst2(declaratorAst2), declarationListAst3(declarationListAst3), compoundStatementAst4(compoundStatementAst4) {}

    virtual ~FunctionDefinition1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class FunctionDefinition2: public FunctionDefinition {
public:
    DeclarationSpecifiers* declarationSpecifiersAst1;
    Declarator* declaratorAst2;
    CompoundStatement* compoundStatementAst3;

    FunctionDefinition2(
        DeclarationSpecifiers* declarationSpecifiersAst1,
        Declarator* declaratorAst2,
        CompoundStatement* compoundStatementAst3
    ): declarationSpecifiersAst1(declarationSpecifiersAst1), declaratorAst2(declaratorAst2), compoundStatementAst3(compoundStatementAst3) {}

    virtual ~FunctionDefinition2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class FunctionDefinition3: public FunctionDefinition {
public:
    Declarator* declaratorAst1;
    DeclarationList* declarationListAst2;
    CompoundStatement* compoundStatementAst3;

    FunctionDefinition3(
        Declarator* declaratorAst1,
        DeclarationList* declarationListAst2,
        CompoundStatement* compoundStatementAst3
    ): declaratorAst1(declaratorAst1), declarationListAst2(declarationListAst2), compoundStatementAst3(compoundStatementAst3) {}

    virtual ~FunctionDefinition3();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class FunctionDefinition4: public FunctionDefinition {
public:
    Declarator* declaratorAst1;
    CompoundStatement* compoundStatementAst2;

    FunctionDefinition4(
        Declarator* declaratorAst1,
        CompoundStatement* compoundStatementAst2
    ): declaratorAst1(declaratorAst1), compoundStatementAst2(compoundStatementAst2) {}

    virtual ~FunctionDefinition4();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _FUNCTION_DEFINITION_H_
