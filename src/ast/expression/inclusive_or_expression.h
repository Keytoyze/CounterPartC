// Generated by buildSrc/GenerateAST.py
#ifndef _INCLUSIVE_OR_EXPRESSION_H_
#define _INCLUSIVE_OR_EXPRESSION_H_

#include "ast/ast.h"
//#header

class InclusiveOrExpression: public BasicAST {
public:
    virtual ~InclusiveOrExpression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class InclusiveOrExpression1: public InclusiveOrExpression {
public:
    ExclusiveOrExpression* exclusiveOrExpressionAst1;

    InclusiveOrExpression1(
        ExclusiveOrExpression* exclusiveOrExpressionAst1
    ): exclusiveOrExpressionAst1(exclusiveOrExpressionAst1) {}

    virtual ~InclusiveOrExpression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class InclusiveOrExpression2: public InclusiveOrExpression {
public:
    InclusiveOrExpression* inclusiveOrExpressionAst1;
    Vertical* verticalAst2;
    ExclusiveOrExpression* exclusiveOrExpressionAst3;

    InclusiveOrExpression2(
        InclusiveOrExpression* inclusiveOrExpressionAst1,
        Vertical* verticalAst2,
        ExclusiveOrExpression* exclusiveOrExpressionAst3
    ): inclusiveOrExpressionAst1(inclusiveOrExpressionAst1), verticalAst2(verticalAst2), exclusiveOrExpressionAst3(exclusiveOrExpressionAst3) {}

    virtual ~InclusiveOrExpression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_VERTICAL_
#define _CLASS_VERTICAL_
class Vertical;
#endif //_CLASS_VERTICAL_
#ifndef _CLASS_EXCLUSIVEOREXPRESSION_
#define _CLASS_EXCLUSIVEOREXPRESSION_
class ExclusiveOrExpression;
#endif //_CLASS_EXCLUSIVEOREXPRESSION_

#endif // _INCLUSIVE_OR_EXPRESSION_H_
