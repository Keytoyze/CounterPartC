// Generated by buildSrc/GenerateAST.py
#ifndef _UNARY_OPERATOR_H_
#define _UNARY_OPERATOR_H_

#include "ast/ast.h"
//#header

class UnaryOperator: public BasicAST {
public:
    virtual ~UnaryOperator() {}
    virtual void GenerateIR(Context context) {}
    virtual void Dump(int depth) {}
};

class UnaryOperator1: public UnaryOperator {
public:
    And* andAst1;

    UnaryOperator1(
        And* andAst1
    ): andAst1(andAst1) {}

    virtual ~UnaryOperator1();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class UnaryOperator2: public UnaryOperator {
public:
    Mul* mulAst1;

    UnaryOperator2(
        Mul* mulAst1
    ): mulAst1(mulAst1) {}

    virtual ~UnaryOperator2();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class UnaryOperator3: public UnaryOperator {
public:
    Add* addAst1;

    UnaryOperator3(
        Add* addAst1
    ): addAst1(addAst1) {}

    virtual ~UnaryOperator3();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class UnaryOperator4: public UnaryOperator {
public:
    Sub* subAst1;

    UnaryOperator4(
        Sub* subAst1
    ): subAst1(subAst1) {}

    virtual ~UnaryOperator4();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class UnaryOperator5: public UnaryOperator {
public:
    Tilde* tildeAst1;

    UnaryOperator5(
        Tilde* tildeAst1
    ): tildeAst1(tildeAst1) {}

    virtual ~UnaryOperator5();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class UnaryOperator6: public UnaryOperator {
public:
    Exclamation* exclamationAst1;

    UnaryOperator6(
        Exclamation* exclamationAst1
    ): exclamationAst1(exclamationAst1) {}

    virtual ~UnaryOperator6();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_AND_
#define _CLASS_AND_
class And;
#endif //_CLASS_AND_
#ifndef _CLASS_MUL_
#define _CLASS_MUL_
class Mul;
#endif //_CLASS_MUL_
#ifndef _CLASS_SUB_
#define _CLASS_SUB_
class Sub;
#endif //_CLASS_SUB_
#ifndef _CLASS_EXCLAMATION_
#define _CLASS_EXCLAMATION_
class Exclamation;
#endif //_CLASS_EXCLAMATION_
#ifndef _CLASS_TILDE_
#define _CLASS_TILDE_
class Tilde;
#endif //_CLASS_TILDE_
#ifndef _CLASS_ADD_
#define _CLASS_ADD_
class Add;
#endif //_CLASS_ADD_

#endif // _UNARY_OPERATOR_H_
