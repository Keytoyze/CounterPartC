// Generated by buildSrc/GenerateAST.py
#ifndef _UNARY_OPERATOR_H_
#define _UNARY_OPERATOR_H_

//#include "ast/ast.h"
class Add;
class And;
class Exclamation;
class Mul;
class Sub;
class Tilde;

class UnaryOperator: public BasicAST {
public:
    virtual ~UnaryOperator() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class UnaryOperator1: public UnaryOperator {
public:
    And* andAst1;

    UnaryOperator1(
        And* andAst1
    ): andAst1(andAst1) {}

    virtual ~UnaryOperator1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryOperator2: public UnaryOperator {
public:
    Mul* mulAst1;

    UnaryOperator2(
        Mul* mulAst1
    ): mulAst1(mulAst1) {}

    virtual ~UnaryOperator2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryOperator3: public UnaryOperator {
public:
    Add* addAst1;

    UnaryOperator3(
        Add* addAst1
    ): addAst1(addAst1) {}

    virtual ~UnaryOperator3();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryOperator4: public UnaryOperator {
public:
    Sub* subAst1;

    UnaryOperator4(
        Sub* subAst1
    ): subAst1(subAst1) {}

    virtual ~UnaryOperator4();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryOperator5: public UnaryOperator {
public:
    Tilde* tildeAst1;

    UnaryOperator5(
        Tilde* tildeAst1
    ): tildeAst1(tildeAst1) {}

    virtual ~UnaryOperator5();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryOperator6: public UnaryOperator {
public:
    Exclamation* exclamationAst1;

    UnaryOperator6(
        Exclamation* exclamationAst1
    ): exclamationAst1(exclamationAst1) {}

    virtual ~UnaryOperator6();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _UNARY_OPERATOR_H_
