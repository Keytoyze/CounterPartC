// Generated by buildSrc/GenerateAST.py
#ifndef _MULTIPLICATIVE_EXPRESSION_H_
#define _MULTIPLICATIVE_EXPRESSION_H_

#include "ast/ast.h"
//#header

class MultiplicativeExpression: public BasicAST {
public:
    virtual ~MultiplicativeExpression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class MultiplicativeExpression1: public MultiplicativeExpression {
public:
    CastExpression* castExpressionAst1;

    MultiplicativeExpression1(
        CastExpression* castExpressionAst1
    ): castExpressionAst1(castExpressionAst1) {}

    virtual ~MultiplicativeExpression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class MultiplicativeExpression2: public MultiplicativeExpression {
public:
    MultiplicativeExpression* multiplicativeExpressionAst1;
    Mul* mulAst2;
    CastExpression* castExpressionAst3;

    MultiplicativeExpression2(
        MultiplicativeExpression* multiplicativeExpressionAst1,
        Mul* mulAst2,
        CastExpression* castExpressionAst3
    ): multiplicativeExpressionAst1(multiplicativeExpressionAst1), mulAst2(mulAst2), castExpressionAst3(castExpressionAst3) {}

    virtual ~MultiplicativeExpression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class MultiplicativeExpression3: public MultiplicativeExpression {
public:
    MultiplicativeExpression* multiplicativeExpressionAst1;
    Div* divAst2;
    CastExpression* castExpressionAst3;

    MultiplicativeExpression3(
        MultiplicativeExpression* multiplicativeExpressionAst1,
        Div* divAst2,
        CastExpression* castExpressionAst3
    ): multiplicativeExpressionAst1(multiplicativeExpressionAst1), divAst2(divAst2), castExpressionAst3(castExpressionAst3) {}

    virtual ~MultiplicativeExpression3();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class MultiplicativeExpression4: public MultiplicativeExpression {
public:
    MultiplicativeExpression* multiplicativeExpressionAst1;
    Mod* modAst2;
    CastExpression* castExpressionAst3;

    MultiplicativeExpression4(
        MultiplicativeExpression* multiplicativeExpressionAst1,
        Mod* modAst2,
        CastExpression* castExpressionAst3
    ): multiplicativeExpressionAst1(multiplicativeExpressionAst1), modAst2(modAst2), castExpressionAst3(castExpressionAst3) {}

    virtual ~MultiplicativeExpression4();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_CASTEXPRESSION_
#define _CLASS_CASTEXPRESSION_
class CastExpression;
#endif //_CLASS_CASTEXPRESSION_
#ifndef _CLASS_DIV_
#define _CLASS_DIV_
class Div;
#endif //_CLASS_DIV_
#ifndef _CLASS_MUL_
#define _CLASS_MUL_
class Mul;
#endif //_CLASS_MUL_
#ifndef _CLASS_MOD_
#define _CLASS_MOD_
class Mod;
#endif //_CLASS_MOD_

#endif // _MULTIPLICATIVE_EXPRESSION_H_
