// Generated by buildSrc/GenerateAST.py
#ifndef _ASSIGNMENT_OPERATOR_H_
#define _ASSIGNMENT_OPERATOR_H_

//#include "ast/ast.h"
class AddAssign;
class AndAssign;
class DivAssign;
class Eq;
class LeftAssign;
class ModAssign;
class MulAssign;
class OrAssign;
class RightAssign;
class SubAssign;
class XorAssign;

class AssignmentOperator: public BasicAST {
public:
    virtual ~AssignmentOperator() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class AssignmentOperator1: public AssignmentOperator {
public:
    Eq* eqAst1;

    AssignmentOperator1(
        Eq* eqAst1
    ): eqAst1(eqAst1) {}

    virtual ~AssignmentOperator1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator2: public AssignmentOperator {
public:
    MulAssign* mulAssignAst1;

    AssignmentOperator2(
        MulAssign* mulAssignAst1
    ): mulAssignAst1(mulAssignAst1) {}

    virtual ~AssignmentOperator2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator3: public AssignmentOperator {
public:
    DivAssign* divAssignAst1;

    AssignmentOperator3(
        DivAssign* divAssignAst1
    ): divAssignAst1(divAssignAst1) {}

    virtual ~AssignmentOperator3();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator4: public AssignmentOperator {
public:
    ModAssign* modAssignAst1;

    AssignmentOperator4(
        ModAssign* modAssignAst1
    ): modAssignAst1(modAssignAst1) {}

    virtual ~AssignmentOperator4();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator5: public AssignmentOperator {
public:
    AddAssign* addAssignAst1;

    AssignmentOperator5(
        AddAssign* addAssignAst1
    ): addAssignAst1(addAssignAst1) {}

    virtual ~AssignmentOperator5();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator6: public AssignmentOperator {
public:
    SubAssign* subAssignAst1;

    AssignmentOperator6(
        SubAssign* subAssignAst1
    ): subAssignAst1(subAssignAst1) {}

    virtual ~AssignmentOperator6();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator7: public AssignmentOperator {
public:
    LeftAssign* leftAssignAst1;

    AssignmentOperator7(
        LeftAssign* leftAssignAst1
    ): leftAssignAst1(leftAssignAst1) {}

    virtual ~AssignmentOperator7();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator8: public AssignmentOperator {
public:
    RightAssign* rightAssignAst1;

    AssignmentOperator8(
        RightAssign* rightAssignAst1
    ): rightAssignAst1(rightAssignAst1) {}

    virtual ~AssignmentOperator8();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator9: public AssignmentOperator {
public:
    AndAssign* andAssignAst1;

    AssignmentOperator9(
        AndAssign* andAssignAst1
    ): andAssignAst1(andAssignAst1) {}

    virtual ~AssignmentOperator9();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator10: public AssignmentOperator {
public:
    XorAssign* xorAssignAst1;

    AssignmentOperator10(
        XorAssign* xorAssignAst1
    ): xorAssignAst1(xorAssignAst1) {}

    virtual ~AssignmentOperator10();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentOperator11: public AssignmentOperator {
public:
    OrAssign* orAssignAst1;

    AssignmentOperator11(
        OrAssign* orAssignAst1
    ): orAssignAst1(orAssignAst1) {}

    virtual ~AssignmentOperator11();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _ASSIGNMENT_OPERATOR_H_
