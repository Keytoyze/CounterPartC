// Generated by buildSrc/GenerateAST.py
#ifndef _UNARY_EXPRESSION_H_
#define _UNARY_EXPRESSION_H_

//#include "ast/ast.h"
class CastExpression;
class DecOp;
class IncOp;
class LRound;
class PostfixExpression;
class RRound;
class Sizeof;
class TypeName;
class UnaryOperator;

class UnaryExpression: public BasicAST {
public:
    virtual ~UnaryExpression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class UnaryExpression1: public UnaryExpression {
public:
    PostfixExpression* postfixExpressionAst1;

    UnaryExpression1(
        PostfixExpression* postfixExpressionAst1
    ): postfixExpressionAst1(postfixExpressionAst1) {}

    virtual ~UnaryExpression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryExpression2: public UnaryExpression {
public:
    IncOp* incOpAst1;
    UnaryExpression* unaryExpressionAst2;

    UnaryExpression2(
        IncOp* incOpAst1,
        UnaryExpression* unaryExpressionAst2
    ): incOpAst1(incOpAst1), unaryExpressionAst2(unaryExpressionAst2) {}

    virtual ~UnaryExpression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryExpression3: public UnaryExpression {
public:
    DecOp* decOpAst1;
    UnaryExpression* unaryExpressionAst2;

    UnaryExpression3(
        DecOp* decOpAst1,
        UnaryExpression* unaryExpressionAst2
    ): decOpAst1(decOpAst1), unaryExpressionAst2(unaryExpressionAst2) {}

    virtual ~UnaryExpression3();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryExpression4: public UnaryExpression {
public:
    UnaryOperator* unaryOperatorAst1;
    CastExpression* castExpressionAst2;

    UnaryExpression4(
        UnaryOperator* unaryOperatorAst1,
        CastExpression* castExpressionAst2
    ): unaryOperatorAst1(unaryOperatorAst1), castExpressionAst2(castExpressionAst2) {}

    virtual ~UnaryExpression4();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryExpression5: public UnaryExpression {
public:
    Sizeof* sizeofAst1;
    UnaryExpression* unaryExpressionAst2;

    UnaryExpression5(
        Sizeof* sizeofAst1,
        UnaryExpression* unaryExpressionAst2
    ): sizeofAst1(sizeofAst1), unaryExpressionAst2(unaryExpressionAst2) {}

    virtual ~UnaryExpression5();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class UnaryExpression6: public UnaryExpression {
public:
    Sizeof* sizeofAst1;
    LRound* lRoundAst2;
    TypeName* typeNameAst3;
    RRound* rRoundAst4;

    UnaryExpression6(
        Sizeof* sizeofAst1,
        LRound* lRoundAst2,
        TypeName* typeNameAst3,
        RRound* rRoundAst4
    ): sizeofAst1(sizeofAst1), lRoundAst2(lRoundAst2), typeNameAst3(typeNameAst3), rRoundAst4(rRoundAst4) {}

    virtual ~UnaryExpression6();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _UNARY_EXPRESSION_H_
