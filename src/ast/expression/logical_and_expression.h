// Generated by buildSrc/GenerateAST.py
#ifndef _LOGICAL_AND_EXPRESSION_H_
#define _LOGICAL_AND_EXPRESSION_H_

//#include "ast/ast.h"
class AndOp;
class InclusiveOrExpression;

class LogicalAndExpression: public BasicAST {
public:
    virtual ~LogicalAndExpression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class LogicalAndExpression1: public LogicalAndExpression {
public:
    InclusiveOrExpression* inclusiveOrExpressionAst1;

    LogicalAndExpression1(
        InclusiveOrExpression* inclusiveOrExpressionAst1
    ): inclusiveOrExpressionAst1(inclusiveOrExpressionAst1) {}

    virtual ~LogicalAndExpression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class LogicalAndExpression2: public LogicalAndExpression {
public:
    LogicalAndExpression* logicalAndExpressionAst1;
    AndOp* andOpAst2;
    InclusiveOrExpression* inclusiveOrExpressionAst3;

    LogicalAndExpression2(
        LogicalAndExpression* logicalAndExpressionAst1,
        AndOp* andOpAst2,
        InclusiveOrExpression* inclusiveOrExpressionAst3
    ): logicalAndExpressionAst1(logicalAndExpressionAst1), andOpAst2(andOpAst2), inclusiveOrExpressionAst3(inclusiveOrExpressionAst3) {}

    virtual ~LogicalAndExpression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _LOGICAL_AND_EXPRESSION_H_
