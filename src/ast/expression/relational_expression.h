// Generated by buildSrc/GenerateAST.py
#ifndef _RELATIONAL_EXPRESSION_H_
#define _RELATIONAL_EXPRESSION_H_

#include "ast/ast.h"
//#header

class RelationalExpression: public BasicAST {
public:
    virtual ~RelationalExpression() {}
    virtual void GenerateIR(Context context) {}
    virtual void Dump(int depth) {}
};

class RelationalExpression1: public RelationalExpression {
public:
    ShiftExpression* shiftExpressionAst1;

    RelationalExpression1(
        ShiftExpression* shiftExpressionAst1
    ): shiftExpressionAst1(shiftExpressionAst1) {}

    virtual ~RelationalExpression1();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class RelationalExpression2: public RelationalExpression {
public:
    RelationalExpression* relationalExpressionAst1;
    LAngle* lAngleAst2;
    ShiftExpression* shiftExpressionAst3;

    RelationalExpression2(
        RelationalExpression* relationalExpressionAst1,
        LAngle* lAngleAst2,
        ShiftExpression* shiftExpressionAst3
    ): relationalExpressionAst1(relationalExpressionAst1), lAngleAst2(lAngleAst2), shiftExpressionAst3(shiftExpressionAst3) {}

    virtual ~RelationalExpression2();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class RelationalExpression3: public RelationalExpression {
public:
    RelationalExpression* relationalExpressionAst1;
    RAngle* rAngleAst2;
    ShiftExpression* shiftExpressionAst3;

    RelationalExpression3(
        RelationalExpression* relationalExpressionAst1,
        RAngle* rAngleAst2,
        ShiftExpression* shiftExpressionAst3
    ): relationalExpressionAst1(relationalExpressionAst1), rAngleAst2(rAngleAst2), shiftExpressionAst3(shiftExpressionAst3) {}

    virtual ~RelationalExpression3();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class RelationalExpression4: public RelationalExpression {
public:
    RelationalExpression* relationalExpressionAst1;
    LeOp* leOpAst2;
    ShiftExpression* shiftExpressionAst3;

    RelationalExpression4(
        RelationalExpression* relationalExpressionAst1,
        LeOp* leOpAst2,
        ShiftExpression* shiftExpressionAst3
    ): relationalExpressionAst1(relationalExpressionAst1), leOpAst2(leOpAst2), shiftExpressionAst3(shiftExpressionAst3) {}

    virtual ~RelationalExpression4();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class RelationalExpression5: public RelationalExpression {
public:
    RelationalExpression* relationalExpressionAst1;
    GeOp* geOpAst2;
    ShiftExpression* shiftExpressionAst3;

    RelationalExpression5(
        RelationalExpression* relationalExpressionAst1,
        GeOp* geOpAst2,
        ShiftExpression* shiftExpressionAst3
    ): relationalExpressionAst1(relationalExpressionAst1), geOpAst2(geOpAst2), shiftExpressionAst3(shiftExpressionAst3) {}

    virtual ~RelationalExpression5();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_GEOP_
#define _CLASS_GEOP_
class GeOp;
#endif //_CLASS_GEOP_
#ifndef _CLASS_RANGLE_
#define _CLASS_RANGLE_
class RAngle;
#endif //_CLASS_RANGLE_
#ifndef _CLASS_SHIFTEXPRESSION_
#define _CLASS_SHIFTEXPRESSION_
class ShiftExpression;
#endif //_CLASS_SHIFTEXPRESSION_
#ifndef _CLASS_LEOP_
#define _CLASS_LEOP_
class LeOp;
#endif //_CLASS_LEOP_
#ifndef _CLASS_LANGLE_
#define _CLASS_LANGLE_
class LAngle;
#endif //_CLASS_LANGLE_

#endif // _RELATIONAL_EXPRESSION_H_
