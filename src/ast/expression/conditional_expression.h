// Generated by buildSrc/GenerateAST.py
#ifndef _CONDITIONAL_EXPRESSION_H_
#define _CONDITIONAL_EXPRESSION_H_

//#include "ast/ast.h"
class Colon;
class Expression;
class LogicalOrExpression;
class Question;

class ConditionalExpression: public BasicAST {
public:
    virtual ~ConditionalExpression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class ConditionalExpression1: public ConditionalExpression {
public:
    LogicalOrExpression* logicalOrExpressionAst1;

    ConditionalExpression1(
        LogicalOrExpression* logicalOrExpressionAst1
    ): logicalOrExpressionAst1(logicalOrExpressionAst1) {}

    virtual ~ConditionalExpression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class ConditionalExpression2: public ConditionalExpression {
public:
    LogicalOrExpression* logicalOrExpressionAst1;
    Question* questionAst2;
    Expression* expressionAst3;
    Colon* colonAst4;
    ConditionalExpression* conditionalExpressionAst5;

    ConditionalExpression2(
        LogicalOrExpression* logicalOrExpressionAst1,
        Question* questionAst2,
        Expression* expressionAst3,
        Colon* colonAst4,
        ConditionalExpression* conditionalExpressionAst5
    ): logicalOrExpressionAst1(logicalOrExpressionAst1), questionAst2(questionAst2), expressionAst3(expressionAst3), colonAst4(colonAst4), conditionalExpressionAst5(conditionalExpressionAst5) {}

    virtual ~ConditionalExpression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _CONDITIONAL_EXPRESSION_H_
