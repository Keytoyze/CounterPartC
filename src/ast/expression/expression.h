// Generated by buildSrc/GenerateAST.py
#ifndef _EXPRESSION_H_
#define _EXPRESSION_H_

//#include "ast/ast.h"
class AssignmentExpression;
class Comma;

class Expression: public BasicAST {
public:
    virtual ~Expression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class Expression1: public Expression {
public:
    AssignmentExpression* assignmentExpressionAst1;

    Expression1(
        AssignmentExpression* assignmentExpressionAst1
    ): assignmentExpressionAst1(assignmentExpressionAst1) {}

    virtual ~Expression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class Expression2: public Expression {
public:
    Expression* expressionAst1;
    Comma* commaAst2;
    AssignmentExpression* assignmentExpressionAst3;

    Expression2(
        Expression* expressionAst1,
        Comma* commaAst2,
        AssignmentExpression* assignmentExpressionAst3
    ): expressionAst1(expressionAst1), commaAst2(commaAst2), assignmentExpressionAst3(assignmentExpressionAst3) {}

    virtual ~Expression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _EXPRESSION_H_
