// Generated by buildSrc/GenerateAST.py
#include <iostream>
#include "ast/ast.h"
#include "ast/render.h"

void PostfixExpression1::Dump(int depth) {
    TreeRender::push("PostfixExpression");
    primaryExpressionAst1->Dump(depth + 1);
    TreeRender::pop();
}

PostfixExpression1::~PostfixExpression1() {
    delete primaryExpressionAst1;
}

void PostfixExpression2::Dump(int depth) {
    TreeRender::push("PostfixExpression");
    postfixExpressionAst1->Dump(depth + 1);
    lSquareAst2->Dump(depth + 1);
    expressionAst3->Dump(depth + 1);
    rSquareAst4->Dump(depth + 1);
    TreeRender::pop();
}

PostfixExpression2::~PostfixExpression2() {
    delete postfixExpressionAst1;
    delete lSquareAst2;
    delete expressionAst3;
    delete rSquareAst4;
}

void PostfixExpression3::Dump(int depth) {
    TreeRender::push("PostfixExpression");
    postfixExpressionAst1->Dump(depth + 1);
    lRoundAst2->Dump(depth + 1);
    rRoundAst3->Dump(depth + 1);
    TreeRender::pop();
}

PostfixExpression3::~PostfixExpression3() {
    delete postfixExpressionAst1;
    delete lRoundAst2;
    delete rRoundAst3;
}

void PostfixExpression4::Dump(int depth) {
    TreeRender::push("PostfixExpression");
    postfixExpressionAst1->Dump(depth + 1);
    lRoundAst2->Dump(depth + 1);
    argumentExpressionListAst3->Dump(depth + 1);
    rRoundAst4->Dump(depth + 1);
    TreeRender::pop();
}

PostfixExpression4::~PostfixExpression4() {
    delete postfixExpressionAst1;
    delete lRoundAst2;
    delete argumentExpressionListAst3;
    delete rRoundAst4;
}

void PostfixExpression5::Dump(int depth) {
    TreeRender::push("PostfixExpression");
    postfixExpressionAst1->Dump(depth + 1);
    periodAst2->Dump(depth + 1);
    identifierAst3->Dump(depth + 1);
    TreeRender::pop();
}

PostfixExpression5::~PostfixExpression5() {
    delete postfixExpressionAst1;
    delete periodAst2;
    delete identifierAst3;
}

void PostfixExpression6::Dump(int depth) {
    TreeRender::push("PostfixExpression");
    postfixExpressionAst1->Dump(depth + 1);
    ptrOpAst2->Dump(depth + 1);
    identifierAst3->Dump(depth + 1);
    TreeRender::pop();
}

PostfixExpression6::~PostfixExpression6() {
    delete postfixExpressionAst1;
    delete ptrOpAst2;
    delete identifierAst3;
}

void PostfixExpression7::Dump(int depth) {
    TreeRender::push("PostfixExpression");
    postfixExpressionAst1->Dump(depth + 1);
    incOpAst2->Dump(depth + 1);
    TreeRender::pop();
}

PostfixExpression7::~PostfixExpression7() {
    delete postfixExpressionAst1;
    delete incOpAst2;
}

void PostfixExpression8::Dump(int depth) {
    TreeRender::push("PostfixExpression");
    postfixExpressionAst1->Dump(depth + 1);
    decOpAst2->Dump(depth + 1);
    TreeRender::pop();
}

PostfixExpression8::~PostfixExpression8() {
    delete postfixExpressionAst1;
    delete decOpAst2;
}
