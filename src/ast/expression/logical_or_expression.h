// Generated by buildSrc/GenerateAST.py
#ifndef _LOGICAL_OR_EXPRESSION_H_
#define _LOGICAL_OR_EXPRESSION_H_

#include "ast/ast.h"
//#header

class LogicalOrExpression: public BasicAST {
public:
    virtual ~LogicalOrExpression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class LogicalOrExpression1: public LogicalOrExpression {
public:
    LogicalAndExpression* logicalAndExpressionAst1;

    LogicalOrExpression1(
        LogicalAndExpression* logicalAndExpressionAst1
    ): logicalAndExpressionAst1(logicalAndExpressionAst1) {}

    virtual ~LogicalOrExpression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class LogicalOrExpression2: public LogicalOrExpression {
public:
    LogicalOrExpression* logicalOrExpressionAst1;
    OrOp* orOpAst2;
    LogicalAndExpression* logicalAndExpressionAst3;

    LogicalOrExpression2(
        LogicalOrExpression* logicalOrExpressionAst1,
        OrOp* orOpAst2,
        LogicalAndExpression* logicalAndExpressionAst3
    ): logicalOrExpressionAst1(logicalOrExpressionAst1), orOpAst2(orOpAst2), logicalAndExpressionAst3(logicalAndExpressionAst3) {}

    virtual ~LogicalOrExpression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_OROP_
#define _CLASS_OROP_
class OrOp;
#endif //_CLASS_OROP_
#ifndef _CLASS_LOGICALANDEXPRESSION_
#define _CLASS_LOGICALANDEXPRESSION_
class LogicalAndExpression;
#endif //_CLASS_LOGICALANDEXPRESSION_

#endif // _LOGICAL_OR_EXPRESSION_H_
