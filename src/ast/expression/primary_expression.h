// Generated by buildSrc/GenerateAST.py
#ifndef _PRIMARY_EXPRESSION_H_
#define _PRIMARY_EXPRESSION_H_

//#include "ast/ast.h"
class Constant;
class Expression;
class Identifier;
class LRound;
class RRound;
class StringLiteral;

class PrimaryExpression: public BasicAST {
public:
    virtual ~PrimaryExpression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class PrimaryExpression1: public PrimaryExpression {
public:
    Identifier* identifierAst1;

    PrimaryExpression1(
        Identifier* identifierAst1
    ): identifierAst1(identifierAst1) {}

    virtual ~PrimaryExpression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class PrimaryExpression2: public PrimaryExpression {
public:
    Constant* constantAst1;

    PrimaryExpression2(
        Constant* constantAst1
    ): constantAst1(constantAst1) {}

    virtual ~PrimaryExpression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class PrimaryExpression3: public PrimaryExpression {
public:
    StringLiteral* stringLiteralAst1;

    PrimaryExpression3(
        StringLiteral* stringLiteralAst1
    ): stringLiteralAst1(stringLiteralAst1) {}

    virtual ~PrimaryExpression3();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class PrimaryExpression4: public PrimaryExpression {
public:
    LRound* lRoundAst1;
    Expression* expressionAst2;
    RRound* rRoundAst3;

    PrimaryExpression4(
        LRound* lRoundAst1,
        Expression* expressionAst2,
        RRound* rRoundAst3
    ): lRoundAst1(lRoundAst1), expressionAst2(expressionAst2), rRoundAst3(rRoundAst3) {}

    virtual ~PrimaryExpression4();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _PRIMARY_EXPRESSION_H_
