// Generated by buildSrc/GenerateAST.py
#ifndef _ADDITIVE_EXPRESSION_H_
#define _ADDITIVE_EXPRESSION_H_

#include "ast/ast.h"
//#header

class AdditiveExpression: public BasicAST {
public:
    virtual ~AdditiveExpression() {}
    virtual void GenerateIR(Context context) {}
    virtual void Dump(int depth) {}
};

class AdditiveExpression1: public AdditiveExpression {
public:
    MultiplicativeExpression* multiplicativeExpressionAst1;

    AdditiveExpression1(
        MultiplicativeExpression* multiplicativeExpressionAst1
    ): multiplicativeExpressionAst1(multiplicativeExpressionAst1) {}

    virtual ~AdditiveExpression1();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class AdditiveExpression2: public AdditiveExpression {
public:
    AdditiveExpression* additiveExpressionAst1;
    Add* addAst2;
    MultiplicativeExpression* multiplicativeExpressionAst3;

    AdditiveExpression2(
        AdditiveExpression* additiveExpressionAst1,
        Add* addAst2,
        MultiplicativeExpression* multiplicativeExpressionAst3
    ): additiveExpressionAst1(additiveExpressionAst1), addAst2(addAst2), multiplicativeExpressionAst3(multiplicativeExpressionAst3) {}

    virtual ~AdditiveExpression2();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};

class AdditiveExpression3: public AdditiveExpression {
public:
    AdditiveExpression* additiveExpressionAst1;
    Sub* subAst2;
    MultiplicativeExpression* multiplicativeExpressionAst3;

    AdditiveExpression3(
        AdditiveExpression* additiveExpressionAst1,
        Sub* subAst2,
        MultiplicativeExpression* multiplicativeExpressionAst3
    ): additiveExpressionAst1(additiveExpressionAst1), subAst2(subAst2), multiplicativeExpressionAst3(multiplicativeExpressionAst3) {}

    virtual ~AdditiveExpression3();
    virtual void GenerateIR(Context context);
    virtual void Dump(int depth);

};


#else

#ifndef _CLASS_ADD_
#define _CLASS_ADD_
class Add;
#endif //_CLASS_ADD_
#ifndef _CLASS_MULTIPLICATIVEEXPRESSION_
#define _CLASS_MULTIPLICATIVEEXPRESSION_
class MultiplicativeExpression;
#endif //_CLASS_MULTIPLICATIVEEXPRESSION_
#ifndef _CLASS_SUB_
#define _CLASS_SUB_
class Sub;
#endif //_CLASS_SUB_

#endif // _ADDITIVE_EXPRESSION_H_
