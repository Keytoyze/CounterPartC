// Generated by buildSrc/GenerateAST.py
#ifndef _ASSIGNMENT_EXPRESSION_H_
#define _ASSIGNMENT_EXPRESSION_H_

//#include "ast/ast.h"
class AssignmentOperator;
class ConditionalExpression;
class UnaryExpression;

class AssignmentExpression: public BasicAST {
public:
    virtual ~AssignmentExpression() {}
    virtual IRValuePtr GenerateIR(Context& context) { return nullptr; }
    virtual void Dump(int depth) {}
};

class AssignmentExpression1: public AssignmentExpression {
public:
    ConditionalExpression* conditionalExpressionAst1;

    AssignmentExpression1(
        ConditionalExpression* conditionalExpressionAst1
    ): conditionalExpressionAst1(conditionalExpressionAst1) {}

    virtual ~AssignmentExpression1();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

class AssignmentExpression2: public AssignmentExpression {
public:
    UnaryExpression* unaryExpressionAst1;
    AssignmentOperator* assignmentOperatorAst2;
    AssignmentExpression* assignmentExpressionAst3;

    AssignmentExpression2(
        UnaryExpression* unaryExpressionAst1,
        AssignmentOperator* assignmentOperatorAst2,
        AssignmentExpression* assignmentExpressionAst3
    ): unaryExpressionAst1(unaryExpressionAst1), assignmentOperatorAst2(assignmentOperatorAst2), assignmentExpressionAst3(assignmentExpressionAst3) {}

    virtual ~AssignmentExpression2();
    virtual IRValuePtr GenerateIR(Context& context);
    virtual void Dump(int depth);

};

#endif // _ASSIGNMENT_EXPRESSION_H_
